# coding: utf-8

"""
    LINE Messaging API

    This document describes LINE Messaging API.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic.v1 import Field, StrictInt, StrictStr, validator
from linebot.v3.messaging.models.discount_price_info_response import DiscountPriceInfoResponse

class DiscountExplicitPriceInfoResponse(DiscountPriceInfoResponse):
    """
    DiscountExplicitPriceInfoResponse
    """
    currency: Optional[StrictStr] = Field(None, description="Currency code (e.g., JPY, THB, TWD).")
    price_after_discount: Optional[StrictInt] = Field(None, alias="priceAfterDiscount")
    original_price: Optional[StrictInt] = Field(None, alias="originalPrice")
    type: str = "explicit"

    __properties = ["type", "currency", "priceAfterDiscount", "originalPrice"]

    @validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('JPY', 'THB', 'TWD'):
            raise ValueError("must be one of enum values ('JPY', 'THB', 'TWD')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DiscountExplicitPriceInfoResponse:
        """Create an instance of DiscountExplicitPriceInfoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DiscountExplicitPriceInfoResponse:
        """Create an instance of DiscountExplicitPriceInfoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DiscountExplicitPriceInfoResponse.parse_obj(obj)

        _obj = DiscountExplicitPriceInfoResponse.parse_obj({
            "type": obj.get("type"),
            "currency": obj.get("currency"),
            "price_after_discount": obj.get("priceAfterDiscount"),
            "original_price": obj.get("originalPrice")
        })
        return _obj

