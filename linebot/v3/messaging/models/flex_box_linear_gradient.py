# coding: utf-8

"""
    LINE Messaging API

    This document describes LINE Messaging API.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic.v1 import Field, StrictStr
from linebot.v3.messaging.models.flex_box_background import FlexBoxBackground

class FlexBoxLinearGradient(FlexBoxBackground):
    """
    FlexBoxLinearGradient
    """
    angle: Optional[StrictStr] = None
    start_color: Optional[StrictStr] = Field(None, alias="startColor")
    end_color: Optional[StrictStr] = Field(None, alias="endColor")
    center_color: Optional[StrictStr] = Field(None, alias="centerColor")
    center_position: Optional[StrictStr] = Field(None, alias="centerPosition")
    type: str = "linearGradient"

    __properties = ["type", "angle", "startColor", "endColor", "centerColor", "centerPosition"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FlexBoxLinearGradient:
        """Create an instance of FlexBoxLinearGradient from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FlexBoxLinearGradient:
        """Create an instance of FlexBoxLinearGradient from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FlexBoxLinearGradient.parse_obj(obj)

        _obj = FlexBoxLinearGradient.parse_obj({
            "type": obj.get("type"),
            "angle": obj.get("angle"),
            "start_color": obj.get("startColor"),
            "end_color": obj.get("endColor"),
            "center_color": obj.get("centerColor"),
            "center_position": obj.get("centerPosition")
        })
        return _obj

