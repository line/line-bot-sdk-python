# coding: utf-8

"""
    LINE Messaging API

    This document describes LINE Messaging API.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic.v1 import BaseModel, Field, constr

class Sender(BaseModel):
    """
    Change icon and display name
    """
    name: Optional[constr(strict=True, max_length=20)] = Field(None, description="Display name. Certain words such as `LINE` may not be used.")
    icon_url: Optional[constr(strict=True, max_length=2000)] = Field(None, alias="iconUrl", description="URL of the image to display as an icon when sending a message")

    __properties = ["name", "iconUrl"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Sender:
        """Create an instance of Sender from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Sender:
        """Create an instance of Sender from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Sender.parse_obj(obj)

        _obj = Sender.parse_obj({
            "name": obj.get("name"),
            "icon_url": obj.get("iconUrl")
        })
        return _obj

