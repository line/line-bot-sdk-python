# coding: utf-8

"""
    LINE Messaging API

    This document describes LINE Messaging API.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional

from linebot.v3.messaging.models.demographic_filter import DemographicFilter
from linebot.v3.messaging.models.subscription_period_demographic import SubscriptionPeriodDemographic

class SubscriptionPeriodDemographicFilter(DemographicFilter):
    """
    SubscriptionPeriodDemographicFilter
    """
    gte: Optional[SubscriptionPeriodDemographic] = None
    lt: Optional[SubscriptionPeriodDemographic] = None
    type: str = "subscriptionPeriod"

    __properties = ["type", "gte", "lt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SubscriptionPeriodDemographicFilter:
        """Create an instance of SubscriptionPeriodDemographicFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SubscriptionPeriodDemographicFilter:
        """Create an instance of SubscriptionPeriodDemographicFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SubscriptionPeriodDemographicFilter.parse_obj(obj)

        _obj = SubscriptionPeriodDemographicFilter.parse_obj({
            "type": obj.get("type"),
            "gte": obj.get("gte"),
            "lt": obj.get("lt")
        })
        return _obj

