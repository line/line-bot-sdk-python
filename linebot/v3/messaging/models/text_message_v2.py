# coding: utf-8

"""
    LINE Messaging API

    This document describes LINE Messaging API.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic.v1 import Field, StrictStr
from linebot.v3.messaging.models.message import Message
from linebot.v3.messaging.models.quick_reply import QuickReply
from linebot.v3.messaging.models.sender import Sender
from linebot.v3.messaging.models.substitution_object import SubstitutionObject

class TextMessageV2(Message):
    """
    TextMessageV2
    https://developers.line.biz/en/reference/messaging-api/#text-message-v2
    """
    text: StrictStr = Field(...)
    substitution: Optional[Dict[str, SubstitutionObject]] = Field(None, description="A mapping that specifies substitutions for parts enclosed in {} within the 'text' field.")
    quote_token: Optional[StrictStr] = Field(None, alias="quoteToken", description="Quote token of the message you want to quote.")
    type: str = "textV2"

    __properties = ["type", "quickReply", "sender", "text", "substitution", "quoteToken"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TextMessageV2:
        """Create an instance of TextMessageV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic.v1 by calling `to_dict()` of quick_reply
        if self.quick_reply:
            _dict['quickReply'] = self.quick_reply.to_dict()
        # override the default output from pydantic.v1 by calling `to_dict()` of sender
        if self.sender:
            _dict['sender'] = self.sender.to_dict()
        # override the default output from pydantic.v1 by calling `to_dict()` of each value in substitution (dict)
        _field_dict = {}
        if self.substitution:
            for _key in self.substitution:
                if self.substitution[_key]:
                    _field_dict[_key] = self.substitution[_key].to_dict()
            _dict['substitution'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TextMessageV2:
        """Create an instance of TextMessageV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TextMessageV2.parse_obj(obj)

        _obj = TextMessageV2.parse_obj({
            "type": obj.get("type"),
            "quick_reply": QuickReply.from_dict(obj.get("quickReply")) if obj.get("quickReply") is not None else None,
            "sender": Sender.from_dict(obj.get("sender")) if obj.get("sender") is not None else None,
            "text": obj.get("text"),
            "substitution": dict(
                (_k, SubstitutionObject.from_dict(_v))
                for _k, _v in obj.get("substitution").items()
            )
            if obj.get("substitution") is not None
            else None,
            "quote_token": obj.get("quoteToken")
        })
        return _obj

